#!/bin/env bash

#LoginNotify v1.4 by Xpyct. https://github.com/Xpyctiks/loginNotify
#release 1.4.000

PATH=/bin:/usr/bin:/usr/sbin/:/usr/local/bin
#token of your Telegram chat API
token=""
#ChatID of Telegram chat you want send to
chat=""
sessType=""
#Name of settings file.
confFile="login-notify.local"
#logger check
loggerInstalled=""
#Variables for db connect.Will be filled in from settings file.
dbName=""
dbUser=""
dbPass=""
dbHost=""
dbPort=""
socket=""
#mysql binary
mysqlApp=""
#Getting hostname.
hostName="$(hostname)"
#Variable for keep launch env. in
launchFrom=""
#Colors
Color_Off='\033[0m'
Red='\033[0;31m'
Green='\033[0;32m'
Yellow='\033[0;33m'
#Tag for Syslog usage
Tag="LOGIN-NOTIFY"
# #Using global variables from PAM_EXEC
declare -x PAM_USER
declare -x PAM_RHOST
declare -x PAM_TYPE
declare -x PAM_TTY
declare -x PAM_SERVICE

#Head to the current directory of the script it has been launched from. Check if we are launched from symlink or any other place as subshell process.
echo "${0}" | egrep -e '^\..*' > /dev/null 2>&1
if [[ "${?}" == "0" ]]; then
  #the script is launched from shell manually
  scriptName=$(echo "${0}" | sed 's/.//')
  scriptPath=$(realpath -e "${0}" | sed "s/\\${scriptName}//")
  launchFrom="shell"
  cd "${scriptPath}"
else
  #the script is launched from cron or any parent process
  scriptName="$(basename "${0}")"
  scriptPath="$(echo "${0}" | sed "s/${scriptName}//")"
  launchFrom="cron"
  cd "${scriptPath}"
fi

logger -V > /dev/null 2>&1
if [[ "${?}" != "127" ]]; then
  loggerInstalled="1"
fi

#Log errors to Syslog
function logError()
{
  if [[ "${loggerInstalled}" == "1" ]]; then
    if ! [[ -z "${1}" ]]; then
    logger -t "${Tag}" "${1}"
    fi
  fi
}

#check config file.Get values from it if it is found, or creating new one if it is not.
if ! [[ -f "${confFile}" ]]; then
  if [[ "${launchFrom}" == "shell" ]]; then
	  echo -e "${Yellow}Warning! $(pwd)${confFile} with all important settings is not found and it was created. Please, fill in the file and then this program will works!${Color_Off}"
    logError "Warning! $(pwd)${confFile} with all important settings is not found and it was created. Please, fill in the file and then this program will works!"
	  cat << EOF > "${confFile}"
#User for DB where list of IP addresses are stored
dbUser="LoginNotify"

#Password for DB.
dbPass=""

#DB name
dbName="LoginNotify"

#DB host
dbHost="127.0.0.1"

#DB port.Default enabled.Priority "low" if both enabled with socket.
dbPort=3306

#Mysql socket. Disabled by default.Priority "high" if both enabled with port.
#socket="/var/run/mysql.sock"

#Telegram api token. Looks like 123456789:abcdefghigklmnopqrstuvwxyz
telegramToken=""

#Telegram chat_id. 9 digits usually.
telegramChat=""

#set path and name of mysql application.Can be absolute or relative
mysqlApp="mysql"

EOF
	  exit 1
  elif [[ "${launchFrom}" == "cron" ]]; then
    logError "Error! No ${confFile} in current directory $(pwd). Launch this script from shell to create default config file."
    exit 1
  fi
else
  #getting all necessary variables from external file
  source "${confFile}"
  #checking all variables are set. No empty one.
  if [[ -z "${dbUser}" ]] || [[ -z "${dbPass}" ]] || [[ -z "${dbName}" ]] || [[ -z "${dbHost}" ]] || [[ -z "${dbPort}" ]] || [[ -z "${telegramChat}" ]] || [[ -z "${telegramToken}" ]]; then
    if [[ "${launchFrom}" == "shell" ]]; then  
      echo -e "${Red}Error! Some important variables in ${confFile} are empty!${Color_Off}"
      echo -e "${Yellow}dbUser=${dbUser}\ndbPass=${dbPass}\ndbName=${dbName}\ndbHost=${dbHost}\ndbPort=${dbPort}\ntelegramToken=${telegramToken}\ntelegramChat=${telegramChat}${Color_Off}"
      logError "Error! Some important variables in $(pwd)${confFile} are empty!"
      logError "dbUser=${dbUser};dbPass=${dbPass};dbName=${dbName};dbHost=${dbHost};dbPort=${dbPort};telegramToken=${telegramToken};telegramChat=${telegramChat}"
      exit 1
    elif [[ "${launchFrom}" == "cron" ]]; then
      logError "Error! Some important variables in $(pwd)${confFile} are empty!"
      logError "dbUser=${dbUser};dbPass=${dbPass};dbName=${dbName};dbHost=${dbHost};dbPort=${dbPort};telegramToken=${telegramToken};telegramChat=${telegramChat}"
      exit 1
    fi
  fi
fi

#Test does CURL is installed.If not, this script doesn't has sense
curl > /dev/null 2>&1
if [[ "${?}" == "127" ]]; then
  if [[ "${launchFrom}" == "shell" ]]; then
    echo -e "${Red}Error! Curl is not installed! Can't send message to Telegram${Color_Off}"
    logError "Error! Curl is not installed! Can't send message to Telegram"
    exit 1
  elif [[ "${launchFrom}" == "cron" ]]; then
    logError "Error! Curl is not installed! Can't send message to Telegram"
    exit 1
  fi
fi

#Shows up a help information
if [[ "${1}" == "--help" || "${1}" == "help" || "${1}" == "-h" ]]; then
  echo -e "${Yellow}Usage: ./<this_script_name> initDB ${Green}<mysql_root_pwd> <db_name> <db_user> <db_pwd>${Color_Off}"
  echo -e "\t${Green}<mysql_root_pwd>${Color_Off} - password of mysql root account to create everything we need. Type \"-\" if not need to use pwd for root access to mysql\n\t${Green}<db_name>${Color_Off} - The name of DB you want to create\n\t${Green}<db_user>${Color_Off} - user of the new DB\n\t${Green}<db_pwd>${Color_Off} - password you want to set for new DB\n"
  echo -e "\t${Yellow}./<this_script_name> addIP ${Green}<IP> <Comment>${Color_Off}"
  echo -e "\t${Green}<IP>${Color_Off} - IP address to be added\n\t${Green}<Comment>${Color_Off} - comment for IP. Should be not large."
  echo -e "\t${Yellow}U./<this_script_name> delIP ${Green}<IP>${Color_Off}"
  echo -e "\t${Green}<IP>${Color_Off} - IP address to be removed\n${Color_Off}"
  exit 0
fi

#This part used to init database before usage of the script
#If the init function is called
if [[ "${1}" == "initDB" ]]; then
  #check do we have enough parameters,else show up a hint.
  if [[ "${#}" -lt 5 ]]; then
    echo -e "${Yellow}Usage: ./<this_script_name> initDB ${Green}<mysql_root_pwd> <db_name> <db_user> <db_pwd>${Color_Off}"
    echo -e "\t${Green}<mysql_root_pwd>${Color_Off} - password of mysql root account to create everything we need. Type \"-\" if not need to use pwd for root access to mysql(~/.my.cnf config is used)\n\t${Green}<db_name>${Color_Off} - The name of DB you want to create\n\t${Green}<db_user>${Color_Off} - user of the new DB\n\t${Green}<db_pwd>${Color_Off} - password you want to set for new DB\n"
    exit 1
  fi
  #decide what method of mysql auth should we use - with pwd or not
  addition=""
  if [[ "${2}" != "-" ]]; then
    if [[ ! -z "${socket}" ]]; then
      conn="-S${socket}"
    else
      conn="-h${dbHost} -P${dbPort}"
  fi
    addition="-uroot -p${2} ${conn}"
  fi
#main function. shoudn't start with any tab.
"${mysqlApp} ${addition}" << EOF
CREATE DATABASE \`${3}\` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
USE \`${3}\`;
CREATE TABLE \`tIPs\` (
  \`Id\` int(10) UNSIGNED NOT NULL,
  \`IP\` varchar(18) COLLATE utf8_bin NOT NULL,
  \`Created\` datetime NOT NULL DEFAULT current_timestamp(),
  \`Comment\` varchar(500) COLLATE utf8_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE \`tIPs\` ADD PRIMARY KEY (\`Id\`), ADD UNIQUE KEY \`IP\` (\`IP\`);
ALTER TABLE \`tIPs\` MODIFY \`Id\` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1;
CREATE USER '${4}'@'%' IDENTIFIED BY '${5}';
GRANT ALL ON ${3}.* to '${4}'@'%';
FLUSH PRIVILEGES;
EOF
  #check if the previous actions were successfull
  if [[ "${?}" == "0" ]]; then
    echo -e "${Green}Database initialized successfully${Color_Off}"
    echo -e "${Yellow}Now you need to edit this script end set the next variables at the top of script to:${Color_Off}"
    echo -e "${White}\tdbName=\"${3}\""
    echo -e "\tdbUser=\"${4}\""
    echo -e "\tdbPass=\"${5}\"${Color_Off}"
    echo -e "${Yellow}and finally: Add to the end of /etc/pam.d/sshd next string: \"session optional pam_exec.so $(pwd)/$(basename ${0})\"${Color_Off}"
    echo -e "${Yellow}If you want to log TTYs: add to the end of /etc/pam.d/login next string: \"session optional pam_exec.so $(pwd)/$(basename ${0})\"${Color_Off}"
    exit 0
  else
    echo -e "${Red}DB is NOT initialized because of some errors - unable to connect/DB already exists/etc. Needs to be checked manually.${Color_Off}"
    exit 1
  fi
fi

#This part for add ip to DB
#If the add function is called
if [[ "${1}" == "addIP" ]]; then
  #check do we have enough parameters,else show up a hint.
  if [[ ! "${#}" -eq 3 ]]; then
    echo -e "${Yellow}Usage: ./<this_script_name> addIP ${Green}<IP> <Comment>${Color_Off}"
    echo -e "\t${Green}<IP>${Color_Off} - IP address to be added\n\t${Green}<Comment>${Color_Off} - comment for IP. Should be not large."
    exit 1
  fi
  if [[ ${#2} -gt 15 ]]; then
    echo -e "${Red}Error! IP var. is too big${Color_Off}"
    exit 1
  fi
  if [[ ${#3} -gt 50 ]]; then
    echo -e "${Red}Error! Comment var. is too big${Color_Off}"
    exit 1
  fi
#mysql function. shoudn't start with any tab.
if [[ ! -z "${socket}" ]]; then
  conn="-S${socket}"
else
  conn="-h${dbHost} -P${dbPort}"
fi
"${mysqlApp} -u${dbUser} -p${dbPass} ${conn}" << EOF
USE \`${dbName}\`;
INSERT INTO \`tIPs\` (\`IP\`, \`Comment\`) VALUES ('${2}', '${3}');
EOF
  #check if the previous actions were successfull
  if [[ "${?}" == "0" ]]; then
    echo -e "${Green}IP added successfully${Color_Off}"
    exit 0
  else
    echo -e "${Red}IP is NOT add because of some errors - unable to connect/IP already exists/etc. Needs to be checked manually.${Color_Off}"
    exit 1
  fi
fi

#This part for delete ip to DB
#If the delete function is called
if [[ "${1}" == "delIP" ]]; then
  #check do we have enough parameters,else show up a hint.
  if [[ ! "${#}" -eq 2 ]]; then
    echo -e "${Yellow}Usage: ./<this_script_name> delIP ${Green}<IP>${Color_Off}"
    echo -e "\t${Green}<IP>${Color_Off} - IP address to be removed\n${Color_Off}"
    exit 1
  fi
  if [[ ${#2} -gt 15 ]]; then
    echo -e "${Red}Error! IP var. is too big${Color_Off}"
    exit 1
  fi
#mysql function. shoudn't start with any tab.
if [[ ! -z "${socket}" ]]; then
  conn="-S${socket}"
else
  conn="-h${dbHost} -P${dbPort}"
fi
"${mysqlApp} -u${dbUser} -p${dbPass} ${conn}" << EOF
USE \`${dbName}\`;
DELETE FROM \`tIPs\` WHERE IP='${2}';
EOF
  #check if the previous actions were successfull
  if [[ "${?}" == "0" ]]; then
    echo -e "${Green}IP removed successfully${Color_Off}"
    exit 0
  else
    echo -e "${Red}IP is NOT removed because of some errors - unable to connect/already deleted/etc. Needs to be checked manually.${Color_Off}"
    exit 1
  fi
fi

#Check has it been launched from PAM or not. If not - break.
if [[ -z ${PAM_TYPE} || -z ${PAM_USER} ]]; then
  if [[ "${launchFrom}" == "shell" ]]; then
    echo -e "${Red}Can't get PAM variables. Seems like the script launched no by PAM. Exiting.${Color_Off}"
    echo -e "${Yellow}Use --help parameter to get help information.${Color_Off}"
    logError "Can't get PAM variables. Seems like the script launched no by PAM. Exiting..."
    logError "RHOST(not important)=${PAM_RHOST};TYPE=${PAM_TYPE};USER=${PAM_USER}"
  elif [[ "${launchFrom}" == "cron" ]]; then
    logError "Can't get PAM variables. Seems like the script launched no by PAM. Exiting..."
    logError "RHOST(not important)=${PAM_RHOST};TYPE=${PAM_TYPE};USER=${PAM_USER}"
  fi
  exit 1
fi

#This function is called when there is some errors with mysql call or request
function sendError()
{
  subj="☢ Mysql error! ${sessType} ${hostName}"
  message="Some errors with mysql request!\nUser: ${PAM_USER} - `date '+%H:%M:%S %d.%m.%Y'` ${PAM_RHOST} ${PAM_SERVICE} ${PAM_TTY}"
  curl  --header "Content-Type: application/json" --request "POST" --data "{\"chat_id\":\"${telegramChat}\",\"text\":\"${subj}\n${message}\"}" "https://api.telegram.org/bot${telegramToken}/sendMessage"
  logError "${message}"
}

#This functions execute actions with addr which exists in DB. So it is whitelisted.
function loginKnown()
{
  #if login session not via SSH.
  if [[ ! -z "${PAM_TYPE}" && ! -z "${PAM_SERVICE}" && -z "${PAM_RHOST}" ]]; then
    #Selecting correct type of action and adding an icon to subject about
    if [[ "${PAM_TYPE}" == "open_session" ]]; then
      sessType="🏄"
      sessType+=" Login to "
    fi
    if [[ "${PAM_TYPE}" == "close_session" ]]; then
      sessType="🏁"
      sessType+=" Logout from "
    fi
    subj="${sessType} ${hostName}"
    message="Attached console.\nUser: ${PAM_USER} Service: ${PAM_SERVICE} TTY: ${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`"
    logError "PAM: Attached console. Type:${PAM_TYPE} User:${PAM_USER} Service:${PAM_SERVICE} TTY:${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`"
    curl  --header "Content-Type: application/json" --request "POST" --data "{\"chat_id\":\"${telegramChat}\",\"text\":\"${subj}\n${message}\"}" "https://api.telegram.org/bot${telegramToken}/sendMessage" & > /dev/null 2>&1
    if [[ "${?}" != "0" ]]; then
      logError "Error sending notify to Telegram. Function: loginKnown, session NOT via SSH. Message pending:"
      logError "${message}"
    fi
  #if login session via SSH.
  elif [[ ! -z "${PAM_TYPE}" && ! -z "${PAM_SERVICE}" && ! -z "${PAM_RHOST}" ]]; then
    #Getting comment for current IP to add to login message - usefull to understand who's coming.
    Comment=$(mysql -u"${dbUser}" -p"${dbPass}" -h"${dbHost}" -P"${dbPort}" -sN -e "use ${dbName};select Comment from tIPs where IP='${PAM_RHOST}'")
    if [[ "${?}" == "0" ]]; then
      #Selecting correct type of action and adding an icon to subject about
      if [[ "${PAM_TYPE}" == "open_session" ]]; then
        sessType="🏄"
        sessType+=" Login to "
      fi
      if [[ "${PAM_TYPE}" == "close_session" ]]; then
        sessType="🏁"
        sessType+=" Logout from "
      fi
      subj="${sessType} ${hostName}"
      message="User: ${PAM_USER} Service: ${PAM_SERVICE} TTY: ${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`\n${PAM_RHOST} ${Comment}"
      logError "PAM: Type:${PAM_TYPE} User:${PAM_USER} Service:${PAM_SERVICE} TTY:${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'` IP:${PAM_RHOST} Comment:${Comment}"
      curl  --header "Content-Type: application/json" --request "POST" --data "{\"chat_id\":\"${telegramChat}\",\"text\":\"${subj}\n${message}\"}" "https://api.telegram.org/bot${telegramToken}/sendMessage" & > /dev/null 2>&1
      if [[ "${?}" != "0" ]]; then
        logError "Error sending notify to Telegram. Function: loginKnown, session via SSH. Message pending:"
        logError "${message}"
      fi
    else
      logError "Some errors while mysql request. Function: loginKnown, session via SSH."
      logError "${message}"
    fi
  fi  
}

#This functions execute actions with addr which doesn't exists in DB. So it is unknown for us.
function loginUnknown()
{
  #if login session not via SSH.
  if [[ ! -z "${PAM_TYPE}" && ! -z "${PAM_SERVICE}" && -z "${PAM_RHOST}" ]]; then
    #Selecting correct type of action and adding an icon to subject about
    if [[ "${PAM_TYPE}" == "open_session" ]]; then
      sessType="🏄"
      sessType+=" Login to "
    fi
    if [[ "${PAM_TYPE}" == "close_session" ]]; then
      sessType="🏁"
      sessType+=" Logout from "
    fi
    subj="${sessType} ${hostName}"
    message="Attached console.\nUser: ${PAM_USER} Service: ${PAM_SERVICE} TTY: ${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`"
    logError "PAM: Attached console. Type:${PAM_TYPE} User:${PAM_USER} Service:${PAM_SERVICE} TTY:${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`"
    curl  --header "Content-Type: application/json" --request "POST" --data "{\"chat_id\":\"${telegramChat}\",\"text\":\"${subj}\n${message}\"}" "https://api.telegram.org/bot${telegramToken}/sendMessage" & > /dev/null 2>&1
    if [[ "${?}" != "0" ]]; then
      logError "Error sending notify to Telegram. Function: loginUnknown, session NOT via SSH. Message pending:"
      logError "${message}"
    fi
  #if login session via SSH.
  elif [[ ! -z "${PAM_TYPE}" && ! -z "${PAM_SERVICE}" && ! -z "${PAM_RHOST}" ]]; then
    #Trying to get info about country from whois
    country=$(whois ${PAM_RHOST} | grep -i country | head -1)
    if [[ "${?}" == "0" ]]; then
      #filtering, to prevent too large output
      if [[ ${#country} -gt 150 ]]; then
        country="Error!Country var. is too big"
      fi
    else
      country="Error! Whois error. Country unknown."
    fi
    #Trying to get info about provider from whois
    descr=$(whois ${PAM_RHOST} | grep -i descr)
    if [[ "${?}" == "0" ]]; then
      #filtering, to prevent too large output
      if [[ ${#descr} -gt 150 ]]; then
        country="Error!Desription var. is too big"
      fi
    else
      country="Error! Whois error. Desription unknown."
    fi
    if [[ "${PAM_TYPE}" == "open_session" ]]; then
      sessType="👀"
      sessType+=" Login from unconfirmed addr to "
    fi
    if [[ "${PAM_TYPE}" == "close_session" ]]; then
      sessType="👀"
      sessType+=" Logout from unconfirmed addr "
    fi
    subj="${sessType} ${hostName}"
    message="User: ${PAM_USER} Service: ${PAM_SERVICE} TTY: ${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'`\nIP: ${PAM_RHOST}\n${country}\n${descr}"
    logError "PAM: Type:${PAM_TYPE} User:${PAM_USER} Service:${PAM_SERVICE} TTY:${PAM_TTY} - `date '+%H:%M:%S %d.%m.%Y'` IP:${PAM_RHOST} Country:${country} Desc:${descr}"
    curl  --header "Content-Type: application/json" --request "POST" --data "{\"chat_id\":\"${telegramChat}\",\"text\":\"${subj}\n${message}\"}" "https://api.telegram.org/bot${telegramToken}/sendMessage" & > /dev/null 2>&1
    if [[ "${?}" == "0" ]]; then
      logError "Error sending notify to Telegram. Function: loginUnknown, session via SSH. Message pending:"
      logError "${message}"
    fi
  fi
}

#Main function. Making request to DB and routing the result to the procedure how to proceed the connection futher
if [[ ! -z "${socket}" ]]; then
  conn="-S${socket}"
else
  conn="-h${dbHost} -P${dbPort}"
fi
RES=$("${mysqlApp} -u${dbUser} -p${dbPass} ${conn} -sN -e \"use ${dbName};select * from tIPs where IP='${PAM_RHOST}'\"")
if [[ "${?}" == "0" ]]; then
  if [[ "${RES}" == "" ]]; then
    #go to functions of unknown ip
    loginUnknown
  else
    #go to functions of known ip
    loginKnown
  fi
else
  #send error messages if any
  sendError
fi
